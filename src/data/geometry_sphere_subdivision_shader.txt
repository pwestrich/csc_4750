#version 120
#extension GL_EXT_geometry_shader4: enable

varying in vec3 transformed_normal_vertex_program[3];
varying in vec4 eye_coord_position_vertex_program[3];  //not used

varying out vec3 transformed_normal_geometry_program;
varying out vec4 eye_coord_position_geometry_program;

//does the local coord to eye coord transforms
void processVertex(vec3 v, float radius)
{
   vec3 n = v;  //normal to a sphere in local coords (why this subdivision works at all)
   transformed_normal_geometry_program = normalize(gl_NormalMatrix*n);  //transform normal to eye coords
   //the vertex is placed at the required radius, in the normal direction
   eye_coord_position_geometry_program = gl_ModelViewMatrix*vec4(radius*v, 1.);  //transform vertex to eye coords
   gl_Position = gl_ProjectionMatrix*eye_coord_position_geometry_program;
   EmitVertex();
}

void processTriangle(vec3 v0, vec3 v4, vec3 v2, float radius)
{
   processVertex(v0, radius);
   processVertex(v4, radius);
   processVertex(v2, radius);
   EndPrimitive();
}

void main()
{
   //usual barycentric coordinates
   vec3 v0 = gl_PositionIn[0].xyz;
   vec3 v4 = gl_PositionIn[1].xyz;
   vec3 v2 = gl_PositionIn[2].xyz;

   vec3 s = v4 - v0;
   vec3 t = v2 - v0;

   vec3 vA = v0 + 0.5*s;
   vec3 vB = v0 + 0.5*s + 0.5*t;
   vec3 vC = v0 + 0.5*t;

   float radius = 1.0;

   //will emit a total of four triangles
   //the vertices are still in local coords

   v0 = normalize(v0);  //only works for spheres
   v4 = normalize(v4);
   v2 = normalize(v2);
   vA = normalize(vA);
   vB = normalize(vB);
   vC = normalize(vC);

   processTriangle(v0, vA, vC, radius);
   processTriangle(vA, v4, vB, radius);
   processTriangle(vA, vB, vC, radius);
   processTriangle(vC, vB, v2, radius);
}
