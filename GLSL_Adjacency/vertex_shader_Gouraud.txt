varying vec4 diffuse_color_vertex_program;

void main()
{
   vec3 vertex_pos = vec3(gl_ModelViewMatrix*gl_Vertex);      //vertex position in eye coords

   vec3 light_pos = gl_LightSource[0].position.xyz;           //light source position in eye coords
   vec3 light_vector = normalize(light_pos - vertex_pos);
   vec3 normal_vector = normalize(gl_NormalMatrix*gl_Normal);

   vec3 view_vector = normalize(-1*vertex_pos);  //camera is at the origin in eye coords
   vec3 reflect_vector = reflect(-1*light_vector, normal_vector);

   float diffuse_intensity = dot(light_vector, normal_vector);
   if (diffuse_intensity < 0)
   {
      diffuse_intensity = 0;
   }

   float specular_intensity = dot(view_vector, reflect_vector);
   if (specular_intensity < 0 || diffuse_intensity == 0)
   {
      specular_intensity = 0;
   }
   else
   {
      float shiny = gl_FrontMaterial.shininess;
      specular_intensity = pow(specular_intensity, shiny);
   }

   vec4 diffuse_material = gl_FrontMaterial.diffuse;       //set via OpenGL
   diffuse_color_vertex_program = diffuse_material*diffuse_intensity;
   diffuse_color_vertex_program = diffuse_color_vertex_program + (1,1,1,1)*specular_intensity;

   gl_Position = gl_ModelViewProjectionMatrix*gl_Vertex;  //must be done in the vertex shader
}
