#version 120
#extension GL_EXT_geometry_shader4: enable

varying in vec3 transformed_normal_vertex_program[6];  
varying in vec4 eye_coord_position_vertex_program[6];   
varying out vec3 transformed_normal_geometry_program;                   
varying out vec4 eye_coord_position_geometry_program;

void processTriangle(vec3 v1, vec3 v2, vec3 v3, vec3 n1, vec3 n2, vec3 n3)
{
   gl_Position = gl_ModelViewProjectionMatrix*vec4(v1, 1.0);
   eye_coord_position_geometry_program = gl_ModelViewMatrix*vec4(v1, 1.0);
   transformed_normal_geometry_program = n1;
   EmitVertex();

   gl_Position = gl_ModelViewProjectionMatrix*vec4(v2, 1.0);
   eye_coord_position_geometry_program = gl_ModelViewMatrix*vec4(v2, 1.0);
   transformed_normal_geometry_program = n2;
   EmitVertex();

   gl_Position = gl_ModelViewProjectionMatrix*vec4(v3, 1.0);
   eye_coord_position_geometry_program = gl_ModelViewMatrix*vec4(v3, 1.0);
   transformed_normal_geometry_program = n3;
   EmitVertex();

   EndPrimitive();
}


void main()
{
   //vertices should be in local coordinates

   vec3 v0 = gl_PositionIn[0].xyz;
   vec3 v1 = gl_PositionIn[1].xyz;
   vec3 v2 = gl_PositionIn[2].xyz;
   vec3 v3 = gl_PositionIn[3].xyz;
   vec3 v4 = gl_PositionIn[4].xyz;
   vec3 v5 = gl_PositionIn[5].xyz;

   float three_eighth = 3.0/8.0;
   float one_eighth = 1.0/8.0;
   float one_sixteenth = 1.0/16.0;
   float two_sixteenth = 2.0/16.0;
   float ten_sixteenth = 10.0/16.0;

   //brand new vertices placed along old edges
   //this is the correct loop formula for these vertices
   vec3 e1 = three_eighth*(v0 + v2) + one_eighth*(v1 + v4);
   vec3 e2 = three_eighth*(v2 + v4) + one_eighth*(v3 + v0);
   vec3 e3 = three_eighth*(v0 + v4) + one_eighth*(v2 + v5);

   //not the correct loop formula for these vertices, don't have enough adjacency information
   vec3 v0_relaxed = two_sixteenth*(v1 + v5) + one_sixteenth*(v2 + v4) + ten_sixteenth*v0;
   vec3 v2_relaxed = two_sixteenth*(v1 + v3) + one_sixteenth*(v0 + v4) + ten_sixteenth*v2;
   vec3 v4_relaxed = two_sixteenth*(v3 + v5) + one_sixteenth*(v0 + v2) + ten_sixteenth*v4;

   vec3 n_v0 = transformed_normal_vertex_program[0];
   vec3 n_v4 = transformed_normal_vertex_program[4];
   vec3 n_v2 = transformed_normal_vertex_program[2];
   vec3 n_e1 = normalize(0.5*(n_v0 + n_v2));
   vec3 n_e2 = normalize(0.5*(n_v2 + n_v4));
   vec3 n_e3 = normalize(0.5*(n_v0 + n_v4));

   //triangle 1
   processTriangle(v0_relaxed, e3, e1, n_v0, n_e3, n_e1);

   //triangle 2
   processTriangle(e3, e2, e1, n_e3, n_e2, n_e1);

   //triangle 3
   processTriangle(e3, v4_relaxed, e2, n_e3, n_v4, n_e2);

   //triangle 4
   processTriangle(e1, e2, v2_relaxed, n_e1, n_e2, n_v2);
}
