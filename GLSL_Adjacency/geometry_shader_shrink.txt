#version 120
#extension GL_EXT_geometry_shader4 : enable

varying in vec3 transformed_normal_vertex_program[6];
varying in vec4 eye_coord_position_vertex_program[6];
varying out vec3 transformed_normal_geometry_program;
varying out vec4 eye_coord_position_geometry_program;

//pass through geometry shader with adjacency information
void main()
{
   //vertices must be in local coordinates for the shrink routine to work
   //0,4,2 selected as adjacency information is not required
   vec3 V[3];
   V[0] = gl_PositionIn[0].xyz;
   V[1] = gl_PositionIn[4].xyz;
   V[2] = gl_PositionIn[2].xyz;

   vec3 cg = (V[0] + V[1] + V[2])/3.0;
   float shrink = 1.0;

   gl_Position = gl_ModelViewProjectionMatrix*vec4(cg + shrink * (V[0] - cg), 1.);
   transformed_normal_geometry_program = transformed_normal_vertex_program[0];
   eye_coord_position_geometry_program = eye_coord_position_vertex_program[0];
   EmitVertex();

   gl_Position = gl_ModelViewProjectionMatrix*vec4(cg + shrink * (V[1] - cg), 1.);
   transformed_normal_geometry_program = transformed_normal_vertex_program[4];
   eye_coord_position_geometry_program = eye_coord_position_vertex_program[4];
   EmitVertex();

   gl_Position = gl_ModelViewProjectionMatrix*vec4(cg + shrink * (V[2] - cg), 1.);
   transformed_normal_geometry_program = transformed_normal_vertex_program[2];
   eye_coord_position_geometry_program = eye_coord_position_vertex_program[2];
   EmitVertex();

   EndPrimitive();
}
