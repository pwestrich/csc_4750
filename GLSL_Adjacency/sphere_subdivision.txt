#version 120
#extension GL_EXT_geometry_shader4: enable

uniform int level;
varying float lightIntensity;

vec3 v1, v2, v3;

void produceVertex(float s, float t)
{
   const vec3 lightPos = vec3(0., 10., 0);
   vec3 v = v1 + s*v2 + t*v3;
   v = normalize(v);
   vec3 n = v;  //normal to a sphere
   vec3 transNorm = normalize(gl_NormalMatrix*n);
   vec4 ecPosition = gl_ModelViewMatrix*vec4((radius*v, 1.);
   lightIntensity = dot(normalize(lightPos - ecPosition.xyz), transNorm);
   lightIntensity = abs(lightIntensity);
   gl_Position = gl_ProjectionMatrix*ecPosition;
   EmitVertex();
}

void main()
{
   //usual barycentric coordinates
   v2 = (gl_PositionIn[1] - gl_PositionIn[0]).xyz;
   v3 = (gl_PositionIn[2] - gl_PositionIn[0]).xyz;
   v1 = gl_PositionIn[0].xyz;

   int numLayers = 1 << level;
   float dt = 1./float(numLayers);
   float t_top = 1.;
   float t_bot = 1. - dt;
   for (int it = 0, it < numLayers; it++, t_top = t_bot, t_bot -= dt)
   {
      float smax_top = 1. - t_top;
      float smax_bot = 1. - t_bot;
      int nums = it + 1;
      float ds_top = smax_top / float(nums - 1);
      float ds_bot = smax_bot / float(nums);

      float s_top = 0;
      float s_bot = 0;

      for (int is = 0;, is < nums; is++, s_top += ds_top, s_bot += ds_bot)
      {
         produceVertex(s_bot, t_bot);
         produceVertex(s_top, t_top);
      }

      produceVertex(s_bot, t_bot);
      EndPrimitive();
   }
}